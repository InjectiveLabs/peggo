package relayer

import (
	"context"
	"fmt"
	"math/big"
	"os"
	"testing"

	"github.com/ethereum/go-ethereum"
	ethcmn "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/golang/mock/gomock"
	"github.com/rs/zerolog"
	"github.com/stretchr/testify/assert"
	"github.com/umee-network/Gravity-Bridge/module/x/gravity/types"

	"github.com/umee-network/peggo/mocks"
	gravityMocks "github.com/umee-network/peggo/mocks/gravity"
)

func TestFindLatestValset(t *testing.T) {
	t.Run("ok. 1 member", func(t *testing.T) {
		mockCtrl := gomock.NewController(t)
		logger := zerolog.New(zerolog.ConsoleWriter{Out: os.Stderr})
		mockQClient := mocks.NewMockQueryClient(mockCtrl)
		ethProvider := mocks.NewMockEVMProviderWithRet(mockCtrl)
		mockGravityContract := gravityMocks.NewMockContract(mockCtrl)

		gravityAddress := ethcmn.HexToAddress("0x3bdf8428734244c9e5d82c95d125081939d6d42d")
		fromAddress := ethcmn.HexToAddress("0xd8da6bf26964af9d7eed9e03e53415d37aa96045")

		ethProvider.EXPECT().HeaderByNumber(gomock.Any(), nil).Return(&ethtypes.Header{
			Number: big.NewInt(112),
		}, nil)
		ethProvider.EXPECT().PendingNonceAt(gomock.Any(), fromAddress).Return(uint64(0), nil).AnyTimes()

		mockGravityContract.EXPECT().FromAddress().Return(fromAddress).AnyTimes()
		mockGravityContract.EXPECT().Address().Return(gravityAddress).AnyTimes()
		mockGravityContract.EXPECT().GetValsetNonce(gomock.Any(), fromAddress).Return(big.NewInt(2), nil)

		mockQClient.EXPECT().ValsetRequest(gomock.Any(), &types.QueryValsetRequestRequest{
			Nonce: uint64(2),
		}).Return(&types.QueryValsetRequestResponse{Valset: &types.Valset{
			Nonce: 2,
		}}, nil)

		// FilterValsetUpdatedEvent
		ethProvider.EXPECT().FilterLogs(
			gomock.Any(),
			MatchFilterQuery(ethereum.FilterQuery{
				FromBlock: new(big.Int).SetUint64(0),
				ToBlock:   new(big.Int).SetUint64(112),
				Addresses: []ethcmn.Address{gravityAddress},
				Topics:    [][]ethcmn.Hash{{ethcmn.HexToHash("0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a")}, {}},
			})).
			Return(
				// The test data is from a real tx: https://goerli.etherscan.io/tx/0x79a63e4fdcadb35bc89d6aab9ca2a2c80916817744f472901375290c548e0022#eventlog
				[]ethtypes.Log{
					{
						Address:     gravityAddress,
						Topics:      []ethcmn.Hash{ethcmn.HexToHash("0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a"), ethcmn.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000019")},
						Data:        hexutil.MustDecode("0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000005a64fe82628217900ced80bf3747b5ef88bfa21000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000ffffffff"),
						BlockNumber: 3,
						TxHash:      ethcmn.HexToHash("0x0"),
						TxIndex:     2,
						BlockHash:   ethcmn.HexToHash("0x0"),
						Index:       1,
						Removed:     false,
					},
				},
				nil,
			).Times(1)

		relayer := gravityRelayer{
			logger:            logger,
			cosmosQueryClient: mockQClient,
			gravityContract:   mockGravityContract,
			ethProvider:       ethProvider,
		}

		valset, err := relayer.FindLatestValset(context.Background())
		assert.Nil(t, err)
		assert.NotNil(t, valset)
		assert.Len(t, valset.Members, 1)
	})

	t.Run("ok. 99 members", func(t *testing.T) {
		mockCtrl := gomock.NewController(t)
		logger := zerolog.New(zerolog.ConsoleWriter{Out: os.Stderr})
		mockQClient := mocks.NewMockQueryClient(mockCtrl)
		ethProvider := mocks.NewMockEVMProviderWithRet(mockCtrl)
		mockGravityContract := gravityMocks.NewMockContract(mockCtrl)

		gravityAddress := ethcmn.HexToAddress("0x3bdf8428734244c9e5d82c95d125081939d6d42d")
		fromAddress := ethcmn.HexToAddress("0xd8da6bf26964af9d7eed9e03e53415d37aa96045")

		ethProvider.EXPECT().HeaderByNumber(gomock.Any(), nil).Return(&ethtypes.Header{
			Number: big.NewInt(112),
		}, nil)
		ethProvider.EXPECT().PendingNonceAt(gomock.Any(), fromAddress).Return(uint64(0), nil).AnyTimes()

		mockGravityContract.EXPECT().FromAddress().Return(fromAddress).AnyTimes()
		mockGravityContract.EXPECT().Address().Return(gravityAddress).AnyTimes()
		mockGravityContract.EXPECT().GetValsetNonce(gomock.Any(), fromAddress).Return(big.NewInt(2), nil)

		mockQClient.EXPECT().ValsetRequest(gomock.Any(), &types.QueryValsetRequestRequest{
			Nonce: uint64(2),
		}).Return(&types.QueryValsetRequestResponse{Valset: &types.Valset{
			Nonce: 2,
		}}, nil)

		// FilterValsetUpdatedEvent
		ethProvider.EXPECT().FilterLogs(
			gomock.Any(),
			MatchFilterQuery(ethereum.FilterQuery{
				FromBlock: new(big.Int).SetUint64(0),
				ToBlock:   new(big.Int).SetUint64(112),
				Addresses: []ethcmn.Address{gravityAddress},
				Topics:    [][]ethcmn.Hash{{ethcmn.HexToHash("0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a")}, {}},
			})).
			Return(
				// The test data is from a real tx: https://goerli.etherscan.io/tx/0x4714abe3e48c4f730dd6e851cff83ab4baed33f7ef1991e504722ef4d28fd30f#eventlog
				[]ethtypes.Log{
					{
						Address:     gravityAddress,
						Topics:      []ethcmn.Hash{ethcmn.HexToHash("0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a"), ethcmn.HexToHash("0x0000000000000000000000000000000000000000000000000000000000007cac")},
						Data:        hexutil.MustDecode(""),
						BlockNumber: 3,
						TxHash:      ethcmn.HexToHash("0x0"),
						TxIndex:     2,
						BlockHash:   ethcmn.HexToHash("0x0"),
						Index:       1,
						Removed:     false,
					},
				},
				nil,
			).Times(1)

		relayer := gravityRelayer{
			logger:            logger,
			cosmosQueryClient: mockQClient,
			gravityContract:   mockGravityContract,
			ethProvider:       ethProvider,
		}

		valset, err := relayer.FindLatestValset(context.Background())
		assert.Nil(t, err)
		assert.NotNil(t, valset)
		assert.Len(t, valset.Members, 99)
	})
}

func TestCheckIfValsetsDiffer(t *testing.T) {
	// this function doesn't return a value. Running different scenarios just to increase code coverage.

	t.Run("ok", func(t *testing.T) {
		logger := zerolog.New(zerolog.ConsoleWriter{Out: os.Stderr})

		relayer := gravityRelayer{
			logger: logger,
		}

		relayer.checkIfValsetsDiffer(&types.Valset{}, &types.Valset{})
		relayer.checkIfValsetsDiffer(nil, &types.Valset{})
		relayer.checkIfValsetsDiffer(nil, &types.Valset{Nonce: 2})
		relayer.checkIfValsetsDiffer(&types.Valset{Nonce: 12}, &types.Valset{Nonce: 11})
		relayer.checkIfValsetsDiffer(&types.Valset{}, &types.Valset{Members: []types.BridgeValidator{{EthereumAddress: "0x0"}}})
	})

}

func TestBridgeValidator(t *testing.T) {
	var bridgeValidators BridgeValidators = []types.BridgeValidator{
		{
			EthereumAddress: "0x0000000000000000000000000000000000000000",
			Power:           10000,
		},
		{
			EthereumAddress: "0x1111111111111111111111111111111111111111",
			Power:           20000,
		},
		{
			EthereumAddress: "0x2222222222222222222222222222222222222222",
			Power:           20000,
		},
	}
	bridgeValidators.Sort()
	assert.Equal(t, bridgeValidators[0].EthereumAddress, "0x1111111111111111111111111111111111111111")
	assert.False(t, bridgeValidators.HasDuplicates())
	assert.Equal(t, []uint64{20000, 20000, 10000}, bridgeValidators.GetPowers())

}

type matchFilterQuery struct {
	q ethereum.FilterQuery
}

func (m *matchFilterQuery) Matches(input interface{}) bool {
	q, ok := input.(ethereum.FilterQuery)
	if ok {

		if q.BlockHash != m.q.BlockHash {
			return false
		}

		if q.FromBlock.Int64() != m.q.FromBlock.Int64() {
			return false
		}

		if q.ToBlock.Int64() != m.q.ToBlock.Int64() {
			return false
		}

		if !assert.ObjectsAreEqual(q.Addresses, m.q.Addresses) {
			return false
		}

		// Comparing 2 slices of slices seems to be a bit tricky.

		if len(q.Topics) != len(m.q.Topics) {
			return false
		}

		for i := range q.Topics {
			if len(q.Topics[i]) != len(m.q.Topics[i]) {
				return false
			}

			for j := range q.Topics[i] {
				if q.Topics[i][j] != m.q.Topics[i][j] {
					return false
				}
			}
		}
		return true
	}

	return false
}

func (m *matchFilterQuery) String() string {
	return fmt.Sprintf("is equal to %v (%T)", m.q, m.q)
}

func MatchFilterQuery(q ethereum.FilterQuery) gomock.Matcher {
	return &matchFilterQuery{q: q}
}
