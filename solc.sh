#!/bin/bash

PARAMS=""
while (( "$#" )); do
  case "$1" in
    --force)
        export FORCE=1
        shift
        ;;
    --after)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        export SOLC_AFTER=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    --before)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        export SOLC_BEFORE=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

OS=$(uname)

#
# Install locally on Linux

if [[ ${OS} = "Linux" ]]; then
    echo "Detected Linux"

    REPO_SCRIPTDIR=`dirname "$0"`
    cd $REPO_SCRIPTDIR

    if [ ! -f ./install_linux.sh ]; then
        echo "Cannot find Linux installation script. If you are installing via Docker - it is unnecessary on Linux, instead refer to Linux installation instructions in README.md"
        exit 1
    fi

    bash install_linux.sh

    exit $?
fi


#
# Install globally or at $PREFIX on OS X

if [ -z "$PREFIX" ]; then
    EXISTING_SOLC_PATH=`which solc`
    if [ $? -ne 0 ]; then
        # solc isn't yet installed
        EXISTING_SOLC_PATH='/usr/local/bin/solc'
    fi
else
    EXISTING_SOLC_PATH="$PREFIX/local/bin/solc"
fi

if [ -f $EXISTING_SOLC_PATH ]; then
    read -p "Overwrite ${EXISTING_SOLC_PATH}? [yN] " -r </dev/tty
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1 || return 1
    fi
fi

finalize () {
    chmod u+x $EXISTING_SOLC_PATH
    echo "Installed solc to ${EXISTING_SOLC_PATH}"
}


# The remainder of this script is auto-generated by the Dockerfile
cat >$EXISTING_SOLC_PATH << 'EOF'
#!/bin/bash

function run_linux() {
    export SSELECT_INSTALL_DIR="$HOME/.solc-select"

    if [ ! -e "$SSELECT_INSTALL_DIR" ]; then
        echo 'It appears you do not have solc-select installed, run `solc --install` to install it.'
        exit 1
    fi

    if [[ "$1" == "--upgrade" ]] || [[ "$1" == "--install" ]]; then
        if [[ "$1" == "--upgrade" ]]; then
            echo "Upgrading solc-select..."
        else
            echo "Installing solc-select..."
        fi

        TMP_CLONE_DIR=/tmp/solc-select
        rm -rf $TMP_CLONE_DIR
        git clone "https://github.com/crytic/solc-select.git" $TMP_CLONE_DIR

        $TMP_CLONE_DIR/scripts/install.sh

        rm -rf $TMP_CLONE_DIR
    else
        $SSELECT_INSTALL_DIR/usr/bin/solc-runner $@
    fi
}

function run_docker() {
    if [[ "$1" == "--upgrade" ]] || [[ "$1" == "--install" ]]; then
        if [[ "$1" == "--upgrade" ]]; then
            echo "Upgrading solc-select..."
            docker pull trailofbits/solc-select:latest
        else
            echo "Installing solc-select..."
        fi
        if [[ ! -z "$2" ]]; then
            mkdir -p $2/bin
        fi
        export PREFIX="$2"
        docker run --read-only -i --rm --entrypoint='/bin/sh' trailofbits/solc-select:latest -c 'cat /usr/bin/install.sh' | bash
    else
        docker run --read-only -i --rm --cap-add=SYS_ADMIN -e SOLC_VERSION="$SOLC_VERSION" -e HOST_PWD="$PWD" --mount type=bind,source=/,target=/workdir trailofbits/solc-select:latest $@
    fi
}

OS=$(uname)

# use command
if [ "$1" == "use" ]; then
    if [[ -z "$2" ]]; then
        echo "Need to provide a version to use. To list all available versions use 'solc --versions'"
    # The next line will check that the provided version exists in the list of available versions
    elif printf '%s\n' $(solc --versions) | grep -q -E "^$2$"; then
        echo "export SOLC_VERSION=$2" >$HOME/.solcv
        echo "Now using version $2"
    else
        echo "Version $2 not supported. List all available versions with 'solc --versions'"
    fi
else
    # Check that a solcv file exists in the home directory, and that the Version was not manually set by a user
    if [ -f $HOME/.solcv ] && [[ -z $SOLC_VERSION ]]; then
        source $HOME/.solcv
    fi

    if [ $OS = "Linux" ]; then
        run_linux $@
    else
        run_docker $@
    fi
fi
EOF
finalize
